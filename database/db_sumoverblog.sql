# Host: localhost  (Version 8.0.22)
# Date: 2021-01-16 23:53:28
# Generator: MySQL-Front 6.0  (Build 2.20)


#
# Structure for table "article"
#

DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `createTime` varchar(255) DEFAULT NULL,
  `articleDetail` text,
  `showStatus` varchar(255) DEFAULT 'show',
  `readCount` int DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8;

#
# Data for table "article"
#

INSERT INTO `article` VALUES (1,'nodejs+Express学习总结','1610297156192','也算看了好几天了, 总结一下.\n\n## 概述\n\n前端使用vue作为js框架, axios作为AJAX来动态访问服务器, 使用bootstrap来作为CSS框架.\n\n后端使用nodejs作为服务器, express作为后端框架, Sequelize用于与Mysql进行ORM, 使用EJS模板渲染.\n\n![结构](http://121.36.76.250/images/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png)\n\n# 后端框架概述\n\n项目结构描述\n\n```textmate\n\\root\n|-\\bin\n|   |-www.js\n|-\\models\n|-\\public\n|   |-\\images\n|   |-\\javascripts\n|   |-\\stylesheets\n|-\\routes\n|-\\services\n|-\\test\n|-\\views\n|- app.js\n|- app-config.js\n|- db.js\n|- db-config.js\n|- packages.json\n|- router-autodetect.js\n|- sequelized-automated.config.json\n```\n\n## ExpressMVC配置\n\n需要的一些package:\n\n```json5\n{\n  //  dependencies\n  \"cookie-parser\": \"~1.4.4\",\n  \"debug\": \"~2.6.9\",\n  \"ejs\": \"~2.6.1\",\n  \"express\": \"~4.16.1\",\n  \"http-errors\": \"~1.6.3\",\n  \"morgan\": \"~1.9.1\",\n  \"moment\": \"^2.29.1\",\n  \"body-parser\": \"^1.19.0\",\n  \"express-session\": \"^1.17.1\",\n}\n```\n\nwww与app.js使用WebStorm自动生成.\n\n```javascript\n// app.js\nconst createError = require(\'http-errors\');\nconst express = require(\'express\');\nconst path = require(\'path\');\nconst cookieParser = require(\'cookie-parser\');\nconst logger = require(\'morgan\');\nconst session = require(\"express-session\");\n\nconst AppConfig = require(\"./app-config\");\n\nconst app = express();\n\n// view engine setup\napp.set(\'views\', AppConfig.viewPath);\napp.set(\'view engine\', \'ejs\');\n\napp.use(logger(\'dev\'));\napp.use(express.json());\napp.use(express.urlencoded({extended: false}));\napp.use(cookieParser());\napp.use(express.static(AppConfig.staticPath));\napp.use(session({\n    secret: \"12345\",\n    resave: false,\n    cookie: {maxAge: 6000}\n}));\n\n//  router register.\nrequire(\'./router-autodetect\')(app);\n\n//  **\n// catch 404 and forward to error handler\napp.use(function (req, res, next) {\n    next(createError(404));\n});\n\n// error handler\napp.use(function (err, req, res, next) {\n    // set locals, only providing error in development\n    res.locals.message = err.message;\n    res.locals.error = req.app.get(\'env\') === \'development\' ? err : {};\n\n    // render the error page\n    res.status(err.status || 500);\n    res.render(\'error\', {title: \'error\'});\n});\n\nmodule.exports = app;\n\n```\n\n说明: 路由的router-autodetect委托注册.\n\n```javascript\n//\n//  router-autodetect.js\n//\n//  自动检测app-config.js中的router\nconst AppConfig = require(\"./app-config\");\nconst path = require(\"path\");\nmodule.exports = (app) => {\n    for (let map of AppConfig.urlMapping) {\n        console.log(`process router: ${map.url}=>${map.router}.js...`);\n        const router = require(path.join(AppConfig.routerPath, map.router + \".js\"));\n        app.use(map.url, router);\n    }\n}\n```\n\napp-config.js, 用于存放一些数据. (对应的路径之类的)\n\n```javascript\n//  一些初步配置\nconst path = require(\'path\');\nmodule.exports = {\n    viewPath: path.join(__dirname, \"views/\"),\n    staticPath: path.join(__dirname, \"public\"),\n    routerPath: path.join(__dirname, \"routes\"),\n    urlMapping: [\n        {url: \"/\", router: \"index\"},\n        {url: \"/users\", router: \"users\"},\n        {url: \"/neko\", router: \"neko\"},\n    ]\n};\n```\n\n## Sequelize ORM 配置\n\n依赖package:\n\n```json5\n{\n  //dependencies\n  \"sequelize\": \"^6.3.5\",\n  \"mysql\": \"^2.18.1\",\n  \"sequelize-automate\": \"^1.2.2\",\n  \"mysql2\": \"^2.2.5\"\n}\n```\n\n### Sequelized-automated自动生成Model\n\n在package.json的script中添加 `\"sequelized-automated\": \"sequelize-automate -c sequelized-automated.config.json\"`\n\nsequelized-automated.config.json配置\n\n```json5\n{\n  // 配置仅供参考\n  \"dbOptions\": {\n    \"database\": \"db_nekoneko\",\n    \"username\": \"username\",\n    \"password\": \"password\",\n    \"dialect\": \"mysql\",\n    \"host\": \"localhost\",\n    \"port\": 3306,\n    \"logging\": false\n  },\n  \"options\": {\n    \"type\": \"js\",\n    \"dir\": \"models\"\n  }\n}\n```\n\n### sequelize ORM配置\n\nsequelize配置\n\n```javascript\n// db.json\nconst Sequelize = require(\"sequelize\");\nconst config = require(\"./db-config\");\nconst sequelize = new Sequelize(config.database, config.username, config.password, {\n    host: config.host,\n    pool: {\n        max: 5,\n        min: 0,\n        acquire: 30000,\n        idle: 10000\n    },\n    dialect: \"mysql\",\n    define: {\n        timestamps: false\n    }\n});\n\nmodule.exports = {\n    sequelize\n}\n```\n\n```javascript\n// db-config.js\nvar dbConfig = {\n    database: \"db_nekoneko\",\n    username: \"root\",\n    password: \"2323180\",\n    host: \"localhost\",\n    port: 3306\n}\n\nmodule.exports = dbConfig;\n```\n\n## sequelize+ExpressMVC整合\n\n将数据逻辑处理层单独封装为service. 在routes中调用services. 在service层中初始化Model与封装数据库操作.\n\n```javascript\n//\n//  service层举例\n//  catService.js\n// \nconst {QueryTypes, DataTypes} = require(\'sequelize\');\nconst db = require(\"../db\");\nconst Sequelize = db.sequelize;\nconst cat = require(\"../models/cat\")(Sequelize, DataTypes);\n\ncat.sync(); //  如果没有cat表, 则创建这个表\n\nclass CatService {  //  使用async/await风格代码来访问数据库\n\n    /**\n     * 查询代码举例(1)\n     * @returns {Promise<*>}\n     */\n    static async getAllCat() {\n        var cats = await cat.findAll();\n        return cats;\n    }\n\n    /**\n     *  查询代码举例(2)\n     * @param id\n     * @returns {Promise<null|*>}\n     */\n    static async getCat(id) {\n        var res = await cat.findAll({\n            where: {Id: id}\n        });\n        if (res.length === 1)\n            return res[0];\n        else return null;\n    }\n\n    /**\n     * 插入数据举例\n     * @param nekoname\n     * @param nekoage\n     * @returns {Promise<*>}\n     */\n    static async addCat(nekoname, nekoage) {\n        var res = await cat.create({\n            name: nekoname,\n            age: nekoage\n        });\n        console.log(JSON.stringify(res));\n        return res;\n    }\n\n    /**\n     * 删除数据举例\n     * @param cat_id\n     * @returns {Promise<void>}\n     */\n    static async deleteCat(cat_id) {\n        var res = await cat.destroy({\n            where: {\n                Id: cat_id\n            }\n        });\n    }\n}\n\nmodule.exports = CatService;\n```\n\n通常来讲, 自动生成的model代码是这样的\n\n```javascript\n//\n//cat.js, 还挺严谨的...\n//\nconst {\n    DataTypes\n} = require(\'sequelize\');\n\nmodule.exports = sequelize => {\n    const attributes = {\n        Id: {\n            type: DataTypes.INTEGER,\n            allowNull: false,\n            defaultValue: null,\n            primaryKey: true,\n            autoIncrement: true,\n            comment: null,\n            field: \"Id\"\n        },\n        name: {\n            type: DataTypes.STRING(50),\n            allowNull: false,\n            defaultValue: \"\",\n            primaryKey: false,\n            autoIncrement: false,\n            comment: null,\n            field: \"name\"\n        },\n        age: {\n            type: DataTypes.INTEGER,\n            allowNull: false,\n            defaultValue: \"0\",\n            primaryKey: false,\n            autoIncrement: false,\n            comment: null,\n            field: \"age\"\n        }\n    };\n    const options = {\n        tableName: \"cat\",\n        comment: \"\",\n        indexes: []\n    };\n    const CatModel = sequelize.define(\"cat_model\", attributes, options);\n    return CatModel;\n};\n```\n\n## Express前端数据交互\n\n如何正确响应前端请求?\n\n一个举例\n\n```javascript\n//\n//  neko.js\n//   http://localhost:8000/neko\n//\nconst express = require(\'express\');\nconst router = express.Router();\nconst bodyParser = require(\"body-parser\");\nconst catService = require(\"../services/catService\");\n\nconst urlEncodeParser = bodyParser.urlencoded({extend: false});\n\nrouter.get(\'/\', async (req, res, enext) => {\n    let cats = await catService.getAllCat();\n    res.json(cats);\n});\n\nrouter.get(\'/cat\', urlEncodeParser, async (req, res, next) => {\n    var id = req.query.id;\n    let cat = await catService.getCat(id);\n    res.json(cat);\n});\n\nrouter.post(\'/addCat\', urlEncodeParser, async (req, res, next) => {\n    var nekoname = req.body.nekoname;\n    var nekoage = req.body.nekoage;\n    var nekoAdded = await catService.addCat(nekoname, nekoage);\n    res.json(nekoAdded);\n});\n\nrouter.get(\'/deleteCat\', urlEncodeParser, async (req, res, next) => {\n    var id = req.query.id;\n    let deleteRes = await catService.deleteCat(id);\n    res.json({message: \"success\"}).end();\n});\n\nmodule.exports = router;\n```\n\n### 响应get请求, 并响应一个HTML页面\n\n```javascript\n//\n//  index.js\n//  http://localhost:3000/\n//\nconst express = require(\'express\');\nconst router = express.Router();\n\nrouter.get(\"/\", (req, res, next) => {\n    //  记得要把模板参数传进去\n    var option = {title: \'PotatoSystem\'};\n    if (req.session.loginUser) {\n        option.loginUser = req.session.loginUser;\n    }\n    res.render(\'index\', option);\n});\n```\n\n### 响应AJAX的GET请求, 响应一个JSON\n\n```javascript\nrouter.get(\'/\', async (req, res, next) => {\n    let cats = await catService.getAllCat();\n    res.json(cats).end();\n});\n```\n\n### 带参AJAX的GET请求, 响应一个JSON\n\n参数是放置在req.query中的.\n\n```javascript\nrouter.get(\'/cat\', urlEncodeParser, async (req, res, next) => {\n    //  参数放在req.query中\n    var id = req.query.id;\n    let cat = await catService.getCat(id);\n    res.json(cat);\n});\n```\n\n### 带参POST\n\n使用urlEncoderParser解析后, 参数放在req.body中.\n\n```javascript\nrouter.post(\'/addCat\', urlEncodeParser, async (req, res, next) => {\n    var nekoname = req.body.nekoname;\n    var nekoage = req.body.nekoage;\n    var nekoAdded = await catService.addCat(nekoname, nekoage);\n    res.json(nekoAdded);\n});\n```\n\n## session\n\n在app.js中使用\n\n```javascript\napp.use(session({\n    secret: \"12345\",\n    resave: false,\n    cookie: {maxAge: 6000}\n}));\n```\n\n在解析url请求中通过 `req.session` 来使用session\n\n# 前端(其实没啥结构...)开发小结.\n\n*尤雨溪牛逼!!!!!!!(破音)*\n\n使用EJS模板(其实就是用了一下include和title的渲染...)可以极大的降低开发的复杂度.\n\n将header封装为一个单独的ejs(header.ejs), 用于导入vue, axios, bootstrap和jquery\n\n```html\n<!DOCTYPE html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ -->\n    <title><%= \"undefined\" === typeof (title) ? \"noTitle\" : title %></title>\n\n    <!-- Bootstrap -->\n    <!--    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css\" rel=\"stylesheet\">-->\n    <%/* 导入bootstrap*/%>\n    <link href=\"stylesheets/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <%/* 导入乱七八糟的JS*/%>\n    <script src=\"javascripts/jquery-3.5.1.js\"></script>\n    <script src=\"/javascripts/bootstrap.min.js\"></script>\n    <script src=\"javascripts/vue.js\"></script>\n    <script src=\"javascripts/axios.min.js\"></script>\n\n</head>\n```\n\nejs模板中,可以使用 `<%/* */%>`来注释, 这样注释可以保证渲染的HTML是没有你的憨憨注释的.\n','show',116),(2,'sequelize ORM框架实现MVC总结 ','1610331772200','\n## 项目结构 & 图\n\n项目结构\n\n```text\nroot\n|-models\n|   |\n|   |-cats.js\n|-node_modules\n|-services\n|   |\n|   |-cats.js\n|-app.js\n|-config.js\n|-db.js\n|-package.json\n|-sequelize-automate.config.json\n```\n\n其中, `models` 用于存放友sequelize-automate自动生成的model, `node_modules` 为node的module存放目录, `services` 则用于存放与数据库的操作.\n\n`db.js` 用于生成一个 `sequelize` 的实例, `config.js` 则用于存放一些配置.\n\n![与cat有关的类图](http://121.36.76.250/images/21_1_2_Selected.jpg)\n\n数据库字段\n\n```mysql\ncreate table cat\n(\n    Id   int auto_increment\n        primary key,\n    name varchar(50) default \'\' not null,\n    age  int         default 0  not null\n);\n```\n\n## 起步配置\n\n### 需要的包\n\n```text\n\"sequelize\": \"^6.3.5\",\n\"mysql\": \"^2.18.1\",\n\"sequelize-automate\": \"^1.2.2\",\n\"mysql2\": \"^2.2.5\",\n\"moment\": \"^2.29.1\"\n```\n\n### 脚本配置(主要是自动生成model)\n\n在 `script` 中添加一个 `\"sequelize-automate\": \"sequelize-automate -c sequelize-automate.config.json\"`\n\n然后添加一个 `sequelize-automate.config.json` (配置内容仅供参考)\n\n```json\n{\n  \"dbOptions\": {\n    \"database\": \"db_test\",\n    \"username\": \"root\",\n    \"password\": \"password\",\n    \"dialect\": \"mysql\",\n    \"host\": \"localhost\",\n    \"port\": 3306,\n    \"logging\": false\n  },\n  \"options\": {\n    \"type\": \"js\",\n    //  由于我们使用了node.js, 所以我们设置type为js\n    \"dir\": \"models\"\n  }\n}\n```\n\n`config.js` 配置内容(同样仅供参考)\n\n```js\nvar config = {\n    database: \"db_test\",\n    username: \"root\",\n    password: \"password\",\n    host: \"localhost\",\n    port: 3306\n}\n\nmodule.exports = config;\n```\n\n\n\n##  配置sequelize链接\n\ndb.js中会创建一个sequelize的实例. 具体代码如下.\n\n```js\nconst Sequelize = require(\"sequelize\");\nconst config = require(\"./config\");\nconst sequelize = new Sequelize(config.database, config.username, config.password, {\n    host: config.host,\n    pool: {\n        max: 5,\n        min: 0,\n        acquire: 30000,\n        idle: 10000\n    },\n    dialect: \"mysql\",\n    define: {\n        timestamps: false\n    }\n});\n\nmodule.exports = {\n    sequelize\n}\n```\n\n### 重点说明!\n\n请务必将timestamps设置为false, 否则巨tm恶心. 此处贴一个廖雪峰老师的名言\n\n>   用sequelize.define()定义Model时，传入名称pet，默认的表名就是pets。第二个参数指定列名和数据类型，如果是主键，需要更详细地指定。第三个参数是额外的配置，我们传入{ timestamps: false }是为了关闭Sequelize的自动添加timestamp的功能。所有的ORM框架都有一种很不好的风气，总是自作聪明地加上所谓“自动化”的功能，但是会让人感到完全摸不着头脑。\n\n\n\n##  sequelize-automate 自动化配置\n\n创建好 `sequelize-automate.config.json` 文件.\n\n在命令行中运行 `sequelize-automate -c sequelize-automate.config.json`\n\n##  正确食用model & service\n\n一个正确输出的model应该是这个样子的:\n\n```js\n//  cat.js, 也不知道为啥自动生成的代码是俩空格的...\nconst {\n    DataTypes\n} = require(\'sequelize\');\n\nmodule.exports = sequelize => {\n    const attributes = {\n        Id: {\n            type: DataTypes.INTEGER,\n            allowNull: false,\n            defaultValue: null,\n            primaryKey: true,\n            autoIncrement: true,\n            comment: null,\n            field: \"Id\"\n        },\n        name: {\n            type: DataTypes.STRING(50),\n            allowNull: false,\n            defaultValue: \"\",\n            primaryKey: false,\n            autoIncrement: false,\n            comment: null,\n            field: \"name\"\n        },\n        age: {\n            type: DataTypes.INTEGER,\n            allowNull: false,\n            defaultValue: \"0\",\n            primaryKey: false,\n            autoIncrement: false,\n            comment: null,\n            field: \"age\"\n        }\n    };\n    const options = {\n        tableName: \"cat\",\n        comment: \"\",\n        indexes: []\n    };\n    const CatModel = sequelize.define(\"cat_model\", attributes, options);\n    return CatModel;\n};\n```\n\n一个正常运行的service头.\n\n```js\nconst {QueryTypes, DataTypes} = require(\'sequelize\');\nconst db = require(\"../db\");\nconst Sequelize = db.sequelize;\n//  老版本中, 需要使用Sequelize.import(\'../model/cat\")来导入模型, 而新版本则直接通过闭包来完成. \nconst cat = require(\"../models/cat\")(Sequelize, DataTypes);\n\ncat.sync();     //  如果没有这个表的话, 那么直接创建一个.\n```\n\napp.js中, 直接调用service中暴露出的方法即可.\n\n```js\n//  app.js\nconst catService = require(\"./services/cat\");\n\n(async () => {\n    let cats = await catService.getAllCat();\n    console.log(\"****************************\");\n    console.log(`find ${cats.length} cats!`);\n    for (var cat of cats) {\n        console.log(JSON.stringify(cat));\n    }\n    console.log(\"****************************\");\n})();\n```\n\n注意, 这里Sequelize查询数据库后会返回一个Array. Array的元素为Model.\n\n上述代码中的cats就是查询到的Array, 而cat则为Model类.\n如果需要获得cat的某个字段(如name), 直接`cat.name`调用即可.\n\n##  Sequelize ORM 过程解析.\n\n下图比较清楚的说明了调用过程.\n\n![与cat有关的类图](http://121.36.76.250/images/21_1_2_Selected.jpg)\n\n与数据库初始化有关的操作(链接, 配置等)主要放在db.js中, 暴露出来一个 `sequelize` 对象给 `service`调用.\n\n而服务与数据库之间的操作则交给service层完成, service层暴露一些接口供外部(如controller或这里的app.js)调用.\n\n\n\n(未完待续)','show',46),(3,'Markdown样式测试','1610337612981','\n# h1 标题\n## h2 标题\n### h3 标题\n#### h4 标题\n##### h5 标题\n###### h6 标题\n\n\n## 水平线\n\n___\n\n---\n\n***\n\n\n## 文本样式\n\n**This is bold text**\n\n__This is bold text__\n\n*This is italic text*\n\n_This is italic text_\n\n~~Strikethrough~~\n\n\n## 列表\n\n无序\n\n+ Create a list by starting a line with `+`, `-`, or `*`\n+ Sub-lists are made by indenting 2 spaces:\n  - Marker character change forces new list start:\n    * Ac tristique libero volutpat at\n    + Facilisis in pretium nisl aliquet\n    - Nulla volutpat aliquam velit\n+ Very easy!\n\n有序\n\n1. Lorem ipsum dolor sit amet\n2. Consectetur adipiscing elit\n3. Integer molestie lorem at massa\n\n\n1. You can use sequential numbers...\n1. ...or keep all the numbers as `1.`\n\nStart numbering with offset:\n\n57. foo\n1. bar\n\n\n## 代码\n\nInline `code`\n\nIndented code\n\n    // Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n\n\nBlock code \"fences\"\n\n```\nSample text here...\n```\n\nSyntax highlighting\n\n``` js\nvar foo = function (bar) {\n  return bar++;\n};\n\nconsole.log(foo(5));\n```\n```javascript\n\n/**\n * 文章内容的GET方法\n * 返回一个html\n */\nrouter.get(\'/:id/detail\', urlEncodeParser, async (req, res, next) => {\n    var articleId = req.params.id;\n    console.log(`browser query article ${articleId} detail`);\n    var articleDetail = await articleService.fetchArticleDetail(articleId);\n\n    var article = await articleService.fetchArticle(articleId);\n\n\n    if (article === \"null\" ||\n        article.showStatus !== \"show\") {\n        res.render(\'articleDetail\', {\n            title: \"article missing\"\n        });\n        return\n    }\n    await articleService.articleReadPlus(articleId);\n    var resOption = {\n        title: article.title,\n        articleHTML: articleDetail,\n        articleId: articleId\n\n    };\n    res.render(\'articleDetail\', resOption);\n});\n```\n\n### 大顶堆\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct Stack {\n    int len, arr[10004];\n\n    void push_down(int root = 0) {\n        if (root >= len) return;\n        if ((root * 2 + 1) >= len) return;\n        if ((root * 2 + 2) >= len) {\n            if (arr[root * 2 + 1] > arr[root])std::swap(arr[root * 2 + 1], arr[root]);\n            return;\n        }\n        if (arr[root * 2 + 1] > arr[root * 2 + 2]) {\n            if (arr[root] < arr[root * 2 + 1]) {\n                std::swap(arr[root], arr[root * 2 + 1]);\n                push_down(root * 2 + 1);\n            }\n        } else {\n            if (arr[root] < arr[root * 2 + 2]) {\n                std::swap(arr[root], arr[root * 2 + 2]);\n                push_down(root * 2 + 2);\n            }\n        }\n    }\n\n    void push_up(int root) {\n        if (!root)return;\n        else {\n            if (arr[root / 2] < arr[root]) std::swap(arr[root / 2], arr[root]);\n            push_up(root / 2);\n        }\n    }\n\n    void insert(int value) {\n        arr[len] = value;\n        push_up(len++);\n    }\n\n    void erase() {\n        std::swap(arr[0], arr[--len]);\n        push_down();\n    }\n\n    size_t size() const { return len; }\n\n    int top() const { return arr[0]; }\n\n    void print() { for (int i = 0; i < len; ++i) std::cout << arr[i] << \' \'; }\n};\n\n\nint main(int argc, char *argv[], char *env[]) {\n    std::vector<int> arr = {123, 12, 312, 3, 123, 55, 44, 2, 354, 4};\n    Stack s;\n    for (int a:arr) s.insert(a);\n    while (s.size()) {\n        std::cout << s.top() << \"\\t|\\t\";\n        s.print();\n        std::cout << std::endl;\n        s.erase();\n    }\n}\n\n```\n\n![彩加真可爱!](http://121.36.76.250/images/caijia.jpg)\n\n\n### 表格样式测试\n\n\n| 单词                                                | 意义                                                                       |\n| --------------------------------------------------- | --------------------------------------------------------------------------|\n| appealing                                           | 吸引人的                                                                   |\n| stunning                                            | 惊人的                                                                     |\n| gorgeous                                            | 华丽的                                                                     |\n| blond                                               | 金发碧眼的                                                                 |\n| breathtaking                                        | (其实就是漂亮)                                                             |\n\n廖雪峰名言\n\n> 用sequelize.define()定义Model时，传入名称pet，默认的表名就是pets。第二个参数指定列名和数据类型，如果是主键，需要更详细地指定。第三个参数是额外的配置，我们传入{ timestamps: false }是为了关闭Sequelize的自动添加timestamp的功能。所有的ORM框架都有一种很不好的风气，总是自作聪明地加上所谓“自动化”的功能，但是会让人感到完全摸不着头脑。\n\n\n![Webstorm自动生成的类图](http://121.36.76.250/images/21_1_2_Selected.jpg)\n\n\nLatex公式渲染:\n\n内联Latex\n\n这个 `$ \\int_{0}^{100}f(x)dx $` 积分.\n\n外联latex渲染\n\n```\n$$\n\\frac{1}{12312}\n$$\n```','show',176),(4,'评论区样式测试','1610354298569','评论样式测试\n\n__2333__\n\n![](https://tse1-mm.cn.bing.net/th/id/OIP.ZjymAxc_9H7VuNai-8ekzwAAAA?pid=Api&rs=1)','show',107),(5,'空文章测试','1610364553351',NULL,'show',44),(6,'Markdown+Latex渲染样式测试','1610531239541','## 内联测试\n\nasdasdas `$\\int_1^100 f(x)dx $` asdasdas\n\n## 外联测试\n\n### 样式1\n`$$\n\\frac{1}{123123}\n$$`\n\n### 样式2\n\n```\n$$\n\\frac{1}{123123} = \\frac{sinx}{cosx}\n$$\n```\n\n\n非Latex渲染测试\n\n```java\n$12312312\\thi$\n```\n\n','show',62),(22,'灌水文章测试1','1610373311337','灌水文章测试1','show',15),(24,'安装mysql8.0出现error 1042，无法正常启动解决方案','1610639488456','\n安装mysql8.0时出现1042异常.\n\n>   error 1042：Unable to connect to any of the specified MySQL hosts\n\n##  解决方案\n\n1.  win10中WIN+R, 输入`services.msc`, 找到mysql服务名称(mysql/mysql80)\n2.  右键->属性->登录选项卡, 更改为\"本地账户登录\", 确定.\n3.  重新execute\n','show',22),(27,'WebStorm-IDEA家族-配置与插件介绍','1610729643386','我暂时就先不吹这玩意多牛逼了. 下面主要介绍一些个人常用到的一些简单配置.\n\n*绝大多数配置都是在Setting中进行的, 请务必记住Setting的快捷键Ctrl+Alt+S*\n\n## Appearance\n\n在`Appearance & behavior`的`Appearance`选项中. 可以配置背景图片和全局的字体.\n\n在Editor配置中, 仅可以对编辑器内的字体进行配置. 而在这个选项中 勾上`Use Custom font`后面的选项就可以自定义编辑器外的字体了.\n\n而`BACKGROUND IMAGE`按钮则可以选择一个自己喜欢的背景图片来作为背景. 而且可以调整亮度.\n\n## Keymap\n\n这个地方主要是对快捷键进行配置, 不建议更改过多, 这里仅建议更改一个: 关闭当前标签页.\n\n搜索框中输入`close`, 然后下面`window->Editor Tabs->close`选项就可以编辑关闭当前页的选项啦.\n\n(Ctrl+F4实在是太不好按了= =)\n\n点`Add keyboard shotcut`之后直接按`Ctrl+Alt+Q`即可(不建议改成Ctrl+W或者Ctrl+Q)\n\nCtrl+W是IDEA中非常有用的一个快捷键. 不建议替换为这个.\n\n## 解决下载插件时, 速度太慢的问题(关键问题需要自行解决)\n\n众所周知, JB官网下东西巨慢...这时候我们可以使用一个自己的代理来加速下载.\n\n至于这个代理是啥, 或许是本地的插件仓库?(笑)\n\nSetting中的搜索框中输入`HTTP Proxy` 在打开的选项页中配置即可.\n\n## 一些插件推荐.\n\n这里只推荐一些个人常用, 比较通用, 而且看起来似乎不会随着时间有太大的改动的.\n\nCodeGlance, Material Theme UI Night Owl Theme, CSV Plugin\n\n### CodeGlance\n\n据说这个是Sublime的特色...然后现在几乎每个正经IDE都有的功能.\n\n安装好了之后会在你的页面的右侧给你整一个小地图(?或者缩略图这种)的东西.\n\n最大的用处是鼠标更方便拖到页底了(有时候不愿意用滚轮, 然后点那个侧边的滚轮还贼小, 这个很宽就很舒服)\n\n### Material Theme UI & Night Owl Theme\n\n这两者我决定放到一块去介绍. 前面的这个烂大街了, 随便搜一个IDEA插件推荐估计60%第一个推荐就是这个.\n\n主题喜好看个人, 这里顺便推荐一手`Night Owl Theme`. \n\n这个主题的好处是帮你把一些乱七八糟的字符给你连起来了(比如->, =>, !=, ==, !==), 用了自然会觉得好用.\n\n### CSV Plugin\n\n类似于把CSV文件给你整成表格的形式给你康的一个插件. 用的更多的地方是pycharm(因为pandas一般读csv比较多)\n\n至于IDEA VIM这种的就更因人而异了..不是高强度Vim用户其实不是很推荐用..而且自带的一些快捷键已经够用的了.\n\n### Code Screenshot\n\n一键(Ctrl+Alt+Shift+A, 还有点复杂...)代码截图. 而且只截你选中的行.','show',4),(28,'sequelize 总结','1610791022685','\n# 如何正确食用Sequelize?\n\n个人觉得需要注意的一些点:\n\n1. sequelize的所有CURD操作都是异步(async)的, 按理说这些操作都可以await进行.\n2. \"自动化\"有时候是很脑瘫的东西\n3. 当await的时候出现问题, 而又不是一些常见错误(比如写错了属性名)的时候, 检查一下自己的MySQL是否配置完整.\n\n# 基础操作之如何配置?\n\nnpm就好了, 当然也可以在package.json中引入.\n\n### 如何正确食用模型?\n\n通常情况下(小规模的那种), 自己手动define即可. 反正都是小规模, 甚至都不需要考虑复用性问题.\n\n举例\n\n比如我们的表是这个样子的\n\n```mysql\nCREATE TABLE `cat`\n(\n    `Id`   int         NOT NULL AUTO_INCREMENT,\n    `name` varchar(50) NOT NULL DEFAULT \'\',\n    `age`  int         NOT NULL DEFAULT \'0\',\n    PRIMARY KEY (`Id`)\n) ENGINE = InnoDB\n  AUTO_INCREMENT = 90\n  DEFAULT CHARSET = utf8mb4\n  COLLATE = utf8mb4_0900_ai_ci;\n```\n\n那么按理说, 我们的代码应该是这个样子的.\n\n```js\nconst Sequelize = require(\'sequelize\');\n\nvar sequelize = new Sequelize(\'db_nekoneko\', \'sumover\', \'password\', {\n    host: \'localhost\',  //  一般来说是本地\n    dialect: \'mysql\',\n    pool: {\n        max: 5,\n        min: 0,\n        idle: 30000\n    }\n});\n\nvar Cat = sequelize.define(\'pet\', {\n    id: {\n        type: Sequelize.INTEGER(11),\n        primaryKey: true\n    },\n    name: Sequelize.STRING(100),\n    age: Sequelize.INTEGER(11)\n}, {\n    timestamps: false   // 这个配置项非常重要!\n});\n// 巴拉巴拉的一些操作.\n```\n\n当然, 我们肯定不会止步于写这么小规模的代码, 然而一旦代码量提上来了, 那么自动化和规范就变成了一个很重要的东西.\n\n### 如何正确食用模型2.0\n\n> 自动化是人类进步的阶梯\n> -- 猫猫\n\n有过一定的J2EE/SSM开发经验(写过大作业就行)的同学应该感受过写xml配置文件的痛苦(毕竟xml是一门很恶心的标记语言)\n\n但是json是一个很好的标记语言, 而且json很符合后端码农的胃口. (去他妈的尖括号, 大括号天下第一)\n\n所以一定要把config写到一个额外的`config.js`去. 一来, 方便查找; 二来,可以复用. 当然, 我们同样也可以把模型给写到额外的地方去.\n\n#### sequelize-automate\n\n_帮你更好的自动化_\n\n具体的使用方案在隔壁[ sequelize如何自动生成模型 ](http://www.sumover.cn/2021/01/02/sequelize%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/)\n\n# 如何保证自己的模型没啥大毛病\n\n1. 记得把timestamp关掉.\n2. 一定要加一个主键.(实在不行, 就把所有的字段都设成主键)\n\n# 如何正确CURD\n\n其实翻来覆去就是增删查改.\n\n下面这些东西基本来自[官方文档](https://sequelize.org/master/index.html), 官方文档写的基本不会英文也能看的差不多懂.(前提是你会mysql)\n\n## insert\n\n这里以上面的猫猫模型为例.\n\n增加一个猫猫\n\n```javascript\nvar catCreated = await Cat.create({\n    name: \"nekoneko1\",\n    age: 1\n});\n```\n\n个人比较喜欢async/await的写法. 当然也可以去官方文档查看一下promise写法. (套娃真的很好玩么?)\n\n## select\n\n按理说这几乎是最复杂的一个操作了..\n\nsequelize提供了两种查找方案: findOne/findAll.\n\n### findAll\n\n刚开始不是很擅长折腾的同学可以直接findAll然后康康返回的数组长度就行了(暴力就完事了)\n\n```javascript\n// select * from cat;\nvar catList = await Cat.findAll();\n// select * from cat where id=?;\nvar catList = await Cat.findAll({\n    where: {\n        id: queryId\n    }\n});\n// select * from cat where name=?;\nvar catList = await Cat.findAll({\n    where: {\n        name: queryName\n    }\n});\n// select age from cat where id=?;\nvar catList = await Cat.findAll({\n    attributes: [\'age\'],\n    where: {\n        id: queryId\n    }\n});\n// select age as catAge from cat where id=?;\nvar catList = await Cat.findAll({\n    attributes: [\n        [\'age\', \'catAge\'],\n    ],\n    where: {\n        id: queryId\n    }\n});\n// select age, count(age) as ageCount from cat;\nvar catAgeList = await Cat.findAll({\n    attributes: [\n        \'age\',\n        [sequelize.fn(\'COUNT\', sequelize.col(\'age\')), \'ageCount\'],\n    ],\n});\n// select age, count(age) as ageCount from cat group by age;\nvar catAgeCount = await Cat.findAll({\n    attributes: [\n        \'age\',\n        [sequelize.fn(\'COUNT\', sequelize.col(\'age\')), \'ageCount\'],\n    ],\n    group: \'age\'\n});\n// select * from cat order by age;\nvar catOrdered = await Cat.findAll({\n    order: [\n        \'age\'\n    ]\n});\n```\n\n按理说这个排序不要也行. 你全索引了然后搁外头排序就是了嘛.\n\n### findOne\n\n这个一般就是用于找单条数据的了. 用法和上面的完全一样. 只不过返回的不是list而是单一的json实体.\n\n## update\n\n```javascript\n// update name=? from cat  where id=?;\nvar res = await Cat.update({name: \"sumover\"}, {\n    where: {\n        id: queryId\n    }\n});\n```\n\nupdate的await的返回值为刚更新的实体.\n\n## delete\n\n```javascript\n// delete from cat where id=?;\nawait Cat.destory({\n    where: {\n        id: queryId\n    }\n});\n```\n\n## 乱七八糟的奇淫技巧\n\n### count\n\n有时候可能需要快速统计. 但是这时候如果用findAll然后返回长度..未免效率太低了.\n\n```javascript\n// 直接统计所有的猫猫\nconst catNumber = await Cat.count();\n// 统计age为1的猫猫\nconst catNumber = await cat.count({\n    where: {\n        age: 1\n    }\n});\n```\n\n### max, min, sum\n\n```javascript\nawait Cat.max(\'age\');\nawait Cat.min(\'age\');\nawait Cat.sum(\'age\');\n```','show',4),(29,'sequelize如何自动生成模型','1610791070890','\n其实就是用到一个工具, sequelize-automate\n\n### 如何使用?\n\n1. 添加 `sequelize-automate， mysql2`\n\n2. 在根目录下整一个配置文件 `sequelize-automate.config.json`\n\n    ```json5\n    {\n      \"dbOptions\": {\n        \"database\": \"management\", //  数据库\n        \"username\": \"root\",       //  用户名\n        \"password\": \"12345678\",   //  密码\n        \"dialect\": \"mysql\",       //  数据库类型，可选值：mysql sqlite postgres mssql mariadb\n        \"host\": \"localhost\",      //  host..\n        \"port\": 3306,\n        \"logging\": false\n      },\n      \"options\": {\n        \"type\": \"js\",             //  输出的Model代码风格(这里用的是JS, 此外还有js ts egg midway)\n        \"dir\": \"models\"           //  输出目录\n      }\n    }\n    ```\n   \n   记得在package.json中加一个 `\"Sequelize-automate\": \"sequelize-automate -c sequelize-automate.config.json\"`\n\n## example\n\n数据库的一个表\n\n```mysql\ncreate table pets\n(\n    Id       varchar(50)  default \'\' not null\n        primary key,\n    name     varchar(100) default \'\' not null,\n    birth    varchar(10)  default \'\' not null,\n    gender   tinyint(1)   default 0  not null,\n    createAt bigint       default 0  not null,\n    updateAt bigint       default 0  not null,\n    version  bigint       default 0  not null\n);\n```\n\n生成的代码\n\n```javascript\n//\nconst {\n  DataTypes\n} = require(\'sequelize\');\n\nmodule.exports = sequelize => {\n  const attributes = {\n    Id: {\n      type: DataTypes.STRING(50),\n      allowNull: false,\n      defaultValue: \"\",\n      primaryKey: true,\n      autoIncrement: false,\n      comment: null,\n      field: \"Id\"\n    },\n    name: {\n      type: DataTypes.STRING(100),\n      allowNull: false,\n      defaultValue: \"\",\n      primaryKey: false,\n      autoIncrement: false,\n      comment: null,\n      field: \"name\"\n    },\n    birth: {\n      type: DataTypes.STRING(10),\n      allowNull: false,\n      defaultValue: \"\",\n      primaryKey: false,\n      autoIncrement: false,\n      comment: null,\n      field: \"birth\"\n    },\n    gender: {\n      type: DataTypes.INTEGER(1),\n      allowNull: false,\n      defaultValue: \"0\",\n      primaryKey: false,\n      autoIncrement: false,\n      comment: null,\n      field: \"gender\"\n    },\n    createAt: {\n      type: DataTypes.BIGINT,\n      allowNull: false,\n      defaultValue: \"0\",\n      primaryKey: false,\n      autoIncrement: false,\n      comment: null,\n      field: \"createAt\"\n    },\n    updateAt: {\n      type: DataTypes.BIGINT,\n      allowNull: false,\n      defaultValue: \"0\",\n      primaryKey: false,\n      autoIncrement: false,\n      comment: null,\n      field: \"updateAt\"\n    },\n    version: {\n      type: DataTypes.BIGINT,\n      allowNull: false,\n      defaultValue: \"0\",\n      primaryKey: false,\n      autoIncrement: false,\n      comment: null,\n      field: \"version\"\n    }\n  };\n  const options = {\n    tableName: \"pets\",\n    comment: \"\",\n    indexes: []\n  };\n  const PetsModel = sequelize.define(\"pets_model\", attributes, options);\n  return PetsModel;\n};\n```','show',4),(30,'vue数组动态绑定问题\n','1610809589051','众所周知, vue是一个很强的前端框架.\n\n众所周知, 我们经常用如下方式来渲染一个列表数据.\n\n```html\n\n<div id=\"main\">\n    <div v-for=\"user of userList\">\n        {{user.username}}\n    </div>\n</div>\n<script>\n    var vm_main = new Vue({\n        el: \"#main\",\n        data: {\n            userList: null,\n        },\n        mounted: {\n            //...\n        },\n        method: {\n            changeUsername: () => {\n\n            }\n        }\n    });\n</script>\n```\n\n而在页面中, 某些操作需要更改数组内的某个元素的值(比如说我把第二个元素的姓名从张三改成了李四)\n\n从传统意义的编程角度, 我们很容易想到下面的解决方式.\n\n```javascript\nvm_main.userList[index].username = \"李四\";\n```\n\n然而这个办法是不行的, 办法我们要参考[深入响应式原理](https://cn.vuejs.org/v2/guide/reactivity.html)\n\n```javascript\nvar _user = vm_main.userList[index];\n_user.username = \"李四\";\nvm_main.$set(vm_main.userList, index, _user);\n```\n\n','show',19);

#
# Structure for table "comment"
#

DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `articleId` int DEFAULT NULL,
  `userId` int DEFAULT NULL,
  `content` text,
  `publishedTime` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8;

#
# Data for table "comment"
#

INSERT INTO `comment` VALUES (1,4,1,'好耶!','1610356549698'),(2,4,6,'整挺好','1610356917739'),(12,4,1,'评论测试111','1610363490674'),(13,4,1,'serena!!!','1610364095331'),(14,4,1,'!!!!!','1610364119641'),(15,3,1,'用sequelize.define()定义Model时，传入名称pet，默认的表名就是pets。第二个参数指定列名和数据类型，如果是主键，需要更详细地指定。第三个参数是额外的配置，我们传入{ timestamps: false }是为了关闭Sequelize的自动添加timestamp的功能。所有的ORM框架都有一种很不好的风气，总是自作聪明地加上所谓“自动化”的功能，但是会让人感到完全摸不着头脑。','1610364345193'),(16,5,1,'牛逼牛逼','1610364976925'),(17,5,6,'厉害厉害','1610364991700'),(18,1,6,'好耶~!','1610366136168'),(19,4,6,'asdasd','1610372134625'),(20,4,6,'asdas','1610372153494'),(21,1,1,'2333333','1610552981698'),(22,6,13,'Test','1610616535737'),(23,6,1,'整挺好','1610619777645'),(24,4,15,'卧槽，牛逼','1610695955067'),(25,22,15,'我tm直接抢沙发','1610696002370'),(26,1,15,'ohohohohohoh！！！！！！','1610696156827'),(27,27,1,'可还行','1610729688115');

#
# Structure for table "invitecode"
#

DROP TABLE IF EXISTS `invitecode`;
CREATE TABLE `invitecode` (
  `id` int NOT NULL AUTO_INCREMENT,
  `code` varchar(255) NOT NULL DEFAULT '',
  `inviteBy` int NOT NULL DEFAULT '0',
  `createDate` date DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=94 DEFAULT CHARSET=utf8;

#
# Data for table "invitecode"
#

INSERT INTO `invitecode` VALUES (1,'1',1,'2021-01-09'),(9,'c4be1f62a66e7af4af705697240b98a2',6,'2021-01-10'),(10,'1075e821a809b043ef396e16bc489f10',6,'2021-01-10'),(11,'7643b7084e1e1fdb3a1495b6ff9eef51',6,'2021-01-10'),(12,'f814f4a91f18f1e57525141087575f98',6,'2021-01-10'),(13,'c74baa2f062359f4f49f2b4d90f743e2',6,'2021-01-10'),(14,'a259e22dbbaa791494c619dbd3c9c592',9,'2021-01-10'),(15,'6fbcfcb3f6a0a2ff441d494c6c0bc6b1',9,'2021-01-10'),(16,'23cf6a2eda90c692f10d80f3df4d71e4',9,'2021-01-10'),(17,'1acb9000d54c7460061eb34c0bb90740',9,'2021-01-10'),(18,'506c919b48e712e68a5973ea59da677e',9,'2021-01-10'),(19,'0f8716d40e2780194f25dfdfc54f2e3c',10,'2021-01-10'),(20,'30d767a0d3ae0b93d75d8385f6831e68',10,'2021-01-10'),(21,'1b4905cd2bcb849dc34ff015d3557075',10,'2021-01-10'),(22,'a0442a2d4015e0167bb0784c840833d0',10,'2021-01-10'),(23,'783d9b17bcc170eed804b9951c2d962b',10,'2021-01-10'),(24,'ba5db24c668a34594ddbaa0f01ef8aaf',1,'2021-01-10'),(25,'ce6e6f4324739224fb8c8fa1cc309f72',1,'2021-01-10'),(26,'8ffb1fff688e537e8f3813c21d666177',1,'2021-01-10'),(27,'0a1ca846d31b95a65b6fcfba746cfebe',1,'2021-01-10'),(28,'a5c7804314110250ee5cee0157019ee4',1,'2021-01-10'),(29,'1f8ee79f34024ed362d8c1d6e932e451',6,'2021-01-11'),(30,'8f82e3b8861a8ff75468f295d5795066',6,'2021-01-11'),(31,'54e477f5ef763fcffbf1866bddf0fac4',6,'2021-01-11'),(32,'57447db226b33075716399e752e1268d',6,'2021-01-11'),(33,'b9dacb0466124056b37db8090c7aebc0',6,'2021-01-11'),(34,'7f7f4b214cd034e9f17ef9767a50b8f6',1,'2021-01-11'),(35,'fc07235522c2112f9a55f8dbcb3e3c1a',1,'2021-01-11'),(36,'ac354c2515dd9f9d8237d14904f2d863',1,'2021-01-11'),(37,'c94fe0764dc130e6408655fd658f5418',1,'2021-01-11'),(38,'b17833b1d454b52e200188a75bd87de3',1,'2021-01-11'),(39,'430e36340bc69967e9b8041553c44ea2',1,'2021-01-12'),(40,'d81af7a99d6c08ff4b868aa96ed8edc1',1,'2021-01-12'),(41,'0b9f1f4ef5141e5fa0079d4ead0f1434',1,'2021-01-12'),(42,'0ea8c26ba473dbe8d37dfbcfb124c246',1,'2021-01-12'),(43,'1c5be52fd86b8bd18704acaa9d1ec7c5',1,'2021-01-12'),(44,'e02e4b59b3124a8e5314fdd734f642fd',1,'2021-01-13'),(45,'520f55ac7aad4a1ecbea2a785e22287e',1,'2021-01-13'),(46,'43044daaa7cbff48d36030abcf7c889e',1,'2021-01-13'),(47,'254211152b1be76f346489ecfd2fb330',1,'2021-01-13'),(48,'b9e03306a09972a40da8f4b258e4af37',1,'2021-01-13'),(49,'48edb28ec2778ca42ca745c4552e4bfa',11,'2021-01-13'),(50,'7786ff95a075d11165838e73403edfc9',11,'2021-01-13'),(51,'497e59a5398bb3419dac0003ddee72ac',11,'2021-01-13'),(52,'41ba2ad7627e4e35478a044be58000b5',11,'2021-01-13'),(53,'252a42d8203d898a85636fed0b72dc07',11,'2021-01-13'),(54,'20ab9c7a9d5e1c7601485342e5fa8f3f',1,'2021-01-14'),(55,'233204af85e5af722a248f04e11a88e6',1,'2021-01-14'),(56,'7df437b3abde0ad82fcb466907e8d58d',1,'2021-01-14'),(57,'94535eae992f853cb7a051894a33254e',1,'2021-01-14'),(58,'0d70df7b6f3096d662d16394b487c0bb',1,'2021-01-14'),(59,'a446391b4f6025c9d9bbcb2a64ce1481',11,'2021-01-14'),(60,'46aeef143a14fb6cfafd66c059a2a019',11,'2021-01-14'),(61,'de625b99f94331d685c7052b6297f0d1',11,'2021-01-14'),(62,'a319ead1e4be842a27fdf4acf91f9bc7',11,'2021-01-14'),(63,'7259b115c1eb3091f2312bfd1a11b771',11,'2021-01-14'),(64,'a5c305929bcfe5b3a0406e8698a5eb9c',12,'2021-01-14'),(65,'69a546f829054a207fae9ade7ff414a9',12,'2021-01-14'),(66,'70538933f412460bef01c229d7f65723',12,'2021-01-14'),(67,'f657eddf6184a8d80a6ab229557b14b1',12,'2021-01-14'),(68,'43d97a136b4086dbd6d628d7ba0d1bd2',12,'2021-01-14'),(69,'df8cb90ac527e2160b6c1f12ffc761bb',13,'2021-01-14'),(70,'275127036d4abde7d2c6fcee4e3c6af3',13,'2021-01-14'),(71,'666868b3ad415954c55cc446e2a90221',13,'2021-01-14'),(72,'05a4f30fabc28fbf2d6f85c29d4bb537',13,'2021-01-14'),(73,'6dabbce20568b70f072ab8cf66e4376c',13,'2021-01-14'),(74,'c8035c1512cad9e4dcb87cc735f893b1',14,'2021-01-14'),(75,'7b83fb71df588b55e1ad12a587236be0',14,'2021-01-14'),(76,'61d81b1d524b450b74f9491656eb5980',14,'2021-01-14'),(77,'e214339b34a0978920f3005cd5fc133a',14,'2021-01-14'),(78,'973f42a8a572a27869f525d827c33608',14,'2021-01-14'),(79,'65f488301813dfb229aeb80172517f6e',1,'2021-01-15'),(80,'987dcaca616e9614e4e60849e5e5bc93',1,'2021-01-15'),(81,'afce36a601d4f4b6dd9b31fdf4cf5d8f',1,'2021-01-15'),(82,'937a74bcaebd7b092e9cf57771ecbccd',1,'2021-01-15'),(83,'8b3eefd53d5132a67a9811181fbaf693',1,'2021-01-15'),(84,'8711dc267b42ef8cb163c450108d5972',15,'2021-01-15'),(85,'acd7efe2cdefb2b212d4e4635bad93cf',15,'2021-01-15'),(86,'004e04835e9fc9308bd89541392d51dd',15,'2021-01-15'),(87,'3e3541b11695aa051f79b756e7a09dcc',15,'2021-01-15'),(88,'7fb177583733498ecd02c3d7a0230342',15,'2021-01-15'),(89,'774f6dc9c0ecddc50720b118ff12cff8',1,'2021-01-16'),(90,'68cc2cdb40cd684b47bc651d5a2ba258',1,'2021-01-16'),(91,'877d96a27273f88656605e3c376e8be8',1,'2021-01-16'),(92,'4f5a404e61b2f1bd0b72ab0d9c01a6fd',1,'2021-01-16'),(93,'0d5678a0ee7ee0c31158f2a56841ec06',1,'2021-01-16');

#
# Structure for table "label"
#

DROP TABLE IF EXISTS `label`;
CREATE TABLE `label` (
  `articleId` int NOT NULL DEFAULT '0',
  `labelInfo` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`articleId`,`labelInfo`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

#
# Data for table "label"
#

INSERT INTO `label` VALUES (1,'express'),(1,'node'),(1,'sequelize'),(1,'vue'),(3,'测试'),(4,'测试'),(5,'测试'),(6,'Latex'),(6,'Markdown'),(6,'测试'),(6,'渲染'),(27,'IDEA'),(27,'软件配置'),(28,'node'),(28,'sequelize'),(29,'node'),(29,'sequelize'),(30,'vue');

#
# Structure for table "user"
#

DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(255) NOT NULL DEFAULT '',
  `password` varchar(255) NOT NULL DEFAULT '',
  `register_time` varchar(20) NOT NULL DEFAULT '0',
  `last_login_time` varchar(20) NOT NULL DEFAULT '0',
  `invitecode` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;

#
# Data for table "user"
#

INSERT INTO `user` VALUES (1,'sumover','6dce86fe1d67cc2d35dec6f4d5eca321','1610175301344','1610810657534','1'),(6,'testuser','690451f76fc3e5af7a71385efda8fb6c','1610204727963','1610371024885','1'),(11,'testuser3','690451f76fc3e5af7a71385efda8fb6c','1610553048093','1610611710820','e02e4b59b3124a8e5314fdd734f642fd'),(12,'testuser4','690451f76fc3e5af7a71385efda8fb6c','1610612128715','1610612164296','233204af85e5af722a248f04e11a88e6'),(13,'咕咕咕','cded175cf2f9cde4c18bd88bb905a872','1610616518373','1610616524548','20ab9c7a9d5e1c7601485342e5fa8f3f'),(14,'moony','95d47be0d380a7cd3bb5bbe78e8bed49','1610632215548','1610632235541','20ab9c7a9d5e1c7601485342e5fa8f3f'),(15,'Lancelot','e237118fb737086038cb81ac34d2e7f3','1610695793488','1610700395590','987dcaca616e9614e4e60849e5e5bc93');

#
# Structure for table "userrole"
#

DROP TABLE IF EXISTS `userrole`;
CREATE TABLE `userrole` (
  `userid` int NOT NULL DEFAULT '0',
  `role` varchar(255) NOT NULL,
  PRIMARY KEY (`userid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

#
# Data for table "userrole"
#

INSERT INTO `userrole` VALUES (1,'admin'),(6,'general user'),(11,'general user'),(12,'general user'),(13,'general user'),(14,'general user'),(15,'general user');
